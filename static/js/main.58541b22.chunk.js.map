{"version":3,"sources":["Components/Pokemon.js","Components/PokeList.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","react_default","a","createElement","this","props","name","types","src","photo","alt","Component","PokeList","pokemonArr","map","item","index","key","Components_Pokemon","i","url","pokemon","id","evolution","App","className","Components_PokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAwBeA,0LAnBP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKC,KAAKC,MAAMC,MAChBL,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAKC,KAAKC,MAAME,QAEpBN,EAAAC,EAAAC,cAAA,OAAKK,IAAOJ,KAAKC,MAAMI,MAAOC,IAAI,2BAR5BC,cCyBPC,mLAvBP,OACIX,EAAAC,EAAAC,cAAA,UACIC,KAAKC,MAAMQ,WAAWC,IAAI,SAACC,EAAMC,GAAP,OAC1Bf,EAAAC,EAAAC,cAAA,MAAIc,IAAOD,GACXf,EAAAC,EAAAC,cAACe,EAAD,CACAZ,KAAQS,EAAKT,KACbC,MAASQ,EAAKR,MAAMO,IAAI,SAACP,EAAOY,GAAR,OACpBlB,EAAAC,EAAAC,cAAA,MAAIc,IAAME,GACVlB,EAAAC,EAAAC,cAAA,UACKI,MAITE,MAASM,EAAKK,iBAfPT,aCCjBU,EAAU,CACd,CAACC,GAAK,EAAEhB,KAAO,YAAYC,MAAQ,CAAC,SAAS,SAASgB,UAAY,KAAKH,IAAM,kFAC7E,CAACE,GAAK,EAAEhB,KAAO,UAAUC,MAAQ,CAAC,SAAS,SAASgB,UAAY,YAAYH,IAAM,kFAClF,CAACE,GAAK,EAAEhB,KAAO,WAAWC,MAAQ,CAAC,SAAS,SAASgB,UAAY,UAAUH,IAAM,kFACjF,CAACE,GAAK,EAAEhB,KAAO,aAAaC,MAAQ,CAAC,QAAQgB,UAAY,KAAKH,IAAM,kFACpE,CAACE,GAAK,EAAEhB,KAAO,aAAaC,MAAQ,CAAC,QAAQgB,UAAY,aAAaH,IAAM,kFAC5E,CAACE,GAAK,EAAEhB,KAAO,YAAYC,MAAQ,CAAC,SAAS,QAAQgB,UAAY,aAAaH,IAAM,kFACpF,CAACE,GAAK,EAAEhB,KAAO,WAAWC,MAAQ,CAAC,SAASgB,UAAY,KAAKH,IAAM,kFACnE,CAACE,GAAK,EAAEhB,KAAO,YAAYC,MAAQ,CAAC,SAASgB,UAAY,WAAWH,IAAM,kFAC1E,CAACE,GAAK,EAAEhB,KAAO,YAAYC,MAAQ,CAAC,SAASgB,UAAY,YAAYH,IAAM,kFAC3E,CAACE,GAAK,GAAGhB,KAAO,WAAWC,MAAQ,CAAC,OAAOgB,UAAY,KAAKH,IAAM,oFAerDI,mLAVX,OACEvB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OAEfxB,EAAAC,EAAAC,cAACuB,EAAD,CAAWb,WAAcQ,YALbV,aCLEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.58541b22.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Pokemon extends Component {\n    render() {\n        return (\n            <div>\n                <h2>{this.props.name}</h2>\n                <ul>\n                    <li>{this.props.types}</li>\n                </ul>\n                <img src = {this.props.photo} alt=\"Pokemon Imagen\" />\n            </div>\n        )\n    }\n}\n\nPokemon.propTypes = {\n    name: PropTypes.string.isRequired,\n    types: PropTypes.array.isRequired,\n    photo: PropTypes.string.isRequired,\n}\n\n\nexport default Pokemon;","import React, { Component } from 'react';\nimport Pokemon from './Pokemon';\n\nclass PokeList extends Component {\n    render() {\n        return (\n            <ul>\n               {this.props.pokemonArr.map((item, index) =>\n                <li key = {index}>\n                <Pokemon \n                name = {item.name}\n                types = {item.types.map((types, i) =>\n                    <ul key ={i}>\n                    <li>\n                        {types}\n                    </li>\n                    </ul>\n                    )}\n                photo = {item.url}\n                />\n                </li>\n\n                )}\n            </ul>\n        )\n    }\n}\n\nexport default PokeList;","import React, { Component } from 'react';\nimport './App.css';\nimport PokeList from './Components/PokeList';\n\nconst pokemon = [\n  {\"id\":1,\"name\":\"bulbasaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\"},\n  {\"id\":2,\"name\":\"ivysaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":\"bulbasaur\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png\"},\n  {\"id\":3,\"name\":\"venusaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":\"ivysaur\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png\"},\n  {\"id\":4,\"name\":\"charmander\",\"types\":[\"fire\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png\"},\n  {\"id\":5,\"name\":\"charmeleon\",\"types\":[\"fire\"],\"evolution\":\"charmander\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png\"},\n  {\"id\":6,\"name\":\"charizard\",\"types\":[\"flying\",\"fire\"],\"evolution\":\"charmeleon\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png\"},\n  {\"id\":7,\"name\":\"squirtle\",\"types\":[\"water\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png\"},\n  {\"id\":8,\"name\":\"wartortle\",\"types\":[\"water\"],\"evolution\":\"squirtle\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png\"},\n  {\"id\":9,\"name\":\"blastoise\",\"types\":[\"water\"],\"evolution\":\"wartortle\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png\"},\n  {\"id\":10,\"name\":\"caterpie\",\"types\":[\"bug\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png\"}\n];\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n      <PokeList  pokemonArr = {pokemon} />\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}